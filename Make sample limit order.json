[
    {
        "id": "53895be0db2a80b6",
        "type": "inject",
        "z": "cc1f8621c458136b",
        "name": "",
        "props": [
            {
                "p": "payload1",
                "v": "symbolv",
                "vt": "flow"
            },
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "SPY",
        "payloadType": "str",
        "x": 110,
        "y": 460,
        "wires": [
            [
                "a2f1c1832d9f0dea",
                "5c949cf807dd38d8"
            ]
        ]
    },
    {
        "id": "cdd43c10a7c6170f",
        "type": "function",
        "z": "cc1f8621c458136b",
        "name": "sample buy",
        "func": "node.warn(msg.symbol)\n\nmsg.incr = 1 \nmsg.incr = flow.get(\"price_incr\") // optional price_incr\nmsg.symbol = msg.payload\nmsg.price = Number(msg.price)\nmsg.price = msg.price * msg.incr \nmsg.price = msg.price.toFixed(2)\n\n\n// create a unique clientid with unixtime\nlet d = Date.now()\nlet client_order_id = msg.symbol + d\nmsg.clientorderid = client_order_id // passes this variable in the flow \n\nlet temp = {\n    \"symbol\": msg.symbol,\n    \"qty\": 1,\n    \"side\": 'buy',\n    \"type\": 'limit',\n    \"client_order_id\": client_order_id,\n    \"limit_price\": msg.price,  // limit orders only\n    \"extended_hours\": true,\n    //    \"subtag\": subtag,\n    \"time_in_force\": \"day\"\n};\n\nmsg.payload = temp\nnode.warn(msg.payload)\nnode.warn(\"Limit Price: \" +msg.price)\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 520,
        "wires": [
            [
                "c3507e48d14b074c"
            ]
        ]
    },
    {
        "id": "426f57ec39d57781",
        "type": "comment",
        "z": "cc1f8621c458136b",
        "name": "Make a sample limit  buy",
        "info": "",
        "x": 130,
        "y": 420,
        "wires": []
    },
    {
        "id": "c3507e48d14b074c",
        "type": "alpaca-order",
        "z": "cc1f8621c458136b",
        "conf": "c06cec183f9317f9",
        "x": 490,
        "y": 520,
        "wires": [
            [
                "55ca59b3a8fd6ba5",
                "3c1f01c9d7570168"
            ]
        ]
    },
    {
        "id": "5c949cf807dd38d8",
        "type": "function",
        "z": "cc1f8621c458136b",
        "name": "Get SPY price from global pricec",
        "func": "// Current price\n\nlet pricec = global.get(\"pricec\")\nlet symboln = \"SPY\"\n// Get the price for symboln\nlet pricetemp = pricec[symboln]\nflow.set(\"spy_price\", pricetemp)\nmsg.price = pricetemp\nnode.warn(symboln + \" price = \" + pricetemp)\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 460,
        "wires": [
            [
                "cdd43c10a7c6170f"
            ]
        ]
    },
    {
        "id": "55ca59b3a8fd6ba5",
        "type": "function",
        "z": "cc1f8621c458136b",
        "name": "display order response",
        "func": "let id = msg.payload[\"id\"]\nlet client_order_id = msg.payload[\"client_order_id\"]\nlet created_at = msg.payload[\"created_at\"]\nlet updated_at = msg.payload[\"updated_at\"]\nlet submitted_at = msg.payload[\"submitted_at\"]\nlet filled_at = msg.payload[\"filled_at\"]\nlet expired_at = msg.payload[\"expired_at\"]\nlet canceled_at = msg.payload[\"canceled_at\"]\nlet failed_at = msg.payload[\"failed_at\"]\nlet replaced_at = msg.payload[\"replaced_at\"]\nlet replaced_by = msg.payload[\"replaced_by\"]\nlet replaces = msg.payload[\"replaces\"]\nlet asset_id = msg.payload[\"asset_id\"]\nlet symbol = msg.payload[\"symbol\"]\nlet asset_class = msg.payload[\"asset_class\"]\nlet notional = msg.payload[\"notional\"]\nlet qty = msg.payload[\"qty\"]\nlet filled_qty = msg.payload[\"filled_qty\"]\nlet filled_avg_price = msg.payload[\"filled_avg_price\"]\nlet order_class = msg.payload[\"order_class\"]\nlet order_type = msg.payload[\"order_type\"]\nlet type = msg.payload[\"type\"]\nlet side = msg.payload[\"side\"]\nlet time_in_force = msg.payload[\"time_in_force\"]\nlet limit_price = msg.payload[\"limit_price\"]\nlet stop_price = msg.payload[\"stop_price\"]\nlet status = msg.payload[\"status\"]\nlet extended_hours = msg.payload[\"extended_hours\"]\nlet legs = msg.payload[\"legs\"]\nlet trail_percent = msg.payload[\"trail_percent\"]\nlet trail_price = msg.payload[\"trail_price\"]\nlet hwm = msg.payload[\"hwm\"]\nlet subtag = msg.payload[\"subtag\"]\nlet source = msg.payload[\"source\"]\n\n\nif ( source == null) { source = 0}\nif (limit_price == null) { limit_price = 0 }\nlet result = symbol.includes(\"/\");\nif (result == true) {\n    symbol = symbol.replace(\"/\",\"\")\n}\n\nif ( limit_price == null){ limit_price = 0}\nif ( stop_price == null){ stop_price = 0}\n\nflow.set(\"orderid\", id)\nmsg.query = \"insert into order_confirms (id, client_order_id, created_at, updated_at, submitted_at, asset_id, symbol, asset_class, qty, order_type, type, side, time_in_force, limit_price, stop_price, status, extended_hours, subtag) values \"\nmsg.query += \"('\" + id + \"','\" + client_order_id + \"','\" + created_at + \"','\" + updated_at + \"','\" + submitted_at + \"','\" + asset_id + \"','\" + symbol + \"','\" + asset_class + \"','\" + qty + \"','\" + order_type + \"','\" + type + \"','\" + side + \"','\" + time_in_force + \"','\" + limit_price + \"','\" + stop_price + \"','\" + status + \"','\" + extended_hours + \"','\" + msg.subtag+ \"');\"\n//node.warn(msg.query)\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 520,
        "wires": [
            [
                "4b5779493eaf24cf"
            ]
        ]
    },
    {
        "id": "4b5779493eaf24cf",
        "type": "postgresql",
        "z": "cc1f8621c458136b",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 880,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "abd99c9658d071ab",
        "type": "alpaca-orders-close-one",
        "z": "cc1f8621c458136b",
        "conf": "c06cec183f9317f9",
        "name": "",
        "x": 970,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "3c1f01c9d7570168",
        "type": "delay",
        "z": "cc1f8621c458136b",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 580,
        "y": 580,
        "wires": [
            [
                "700de920e9e62a41"
            ]
        ]
    },
    {
        "id": "700de920e9e62a41",
        "type": "function",
        "z": "cc1f8621c458136b",
        "name": "cancel order_id",
        "func": "msg.payload.order_id = flow.get(\"orderid\")\nnode.warn(\"Cancel orderid: \" +msg.payload.order_id)\n/*\nmsg.payload = []\n\nmsg.payload.order_id = '1ca21090-21fc-4296-b0f3-0ff4bf71b9ad'\n*/\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 580,
        "wires": [
            [
                "abd99c9658d071ab"
            ]
        ]
    },
    {
        "id": "a2f1c1832d9f0dea",
        "type": "function",
        "z": "cc1f8621c458136b",
        "name": "increase limit price",
        "func": "let incr = flow.get(\"decay\")\nincr = incr || 1 \n\nincr = incr * 1.001\nflow.set(\"price_incr\", incr)\n\nnode.warn(\"Decay: \" +incr) \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "c06cec183f9317f9",
        "type": "alpaca-account",
        "name": "paper",
        "keyId": "PKFIHC2PS8EVLNY5L0RP",
        "paper": true
    },
    {
        "id": "7455395cf269fb2b",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "127.0.0.1",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "postgres",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "docker",
        "userFieldType": "str",
        "password": "docker",
        "passwordFieldType": "str"
    }
]