[
    {
        "id": "f4bf96cc4035f734",
        "type": "function",
        "z": "ac198a7cee08255c",
        "name": "Trading Rules",
        "func": "/**\n * Function to replace repeated temp call structure\n * @author Erik Heitsmith\n * @date 01/06/24\n * @param {object} tradeInfo passes correct trade information including symbol, quantity, side, type, order id, limit price, subtag, and time in force\n * @returns the temp object\n */\nfunction tempCall(tradeInfo){\n    let temp = {\n        \"symbol\": tradeInfo.alpaca_ticker,\n        \"qty\": tradeInfo.qty,\n        \"side\": tradeInfo.side,\n        \"type\": tradeInfo.type,\n        \"client_order_id\": tradeInfo.client_order_id,\n        \"limit_price\": tradeInfo.price,  // limit orders only\n        //\"subtag\": tradeInfo.subtag,\n        \"time_in_force\": \"gtc\"\n    };\n    return temp;\n}\n\n/**\n * Constructs object containing RSI, Hist, Stop Loss, Profit Take, and Pyramid. Depending on the ticker, different trading values will be used. The following parameter list shows the correct order of paramters passed into the compValCall method  \n * @author Erik Heitsmith\n * @date 01/08/24\n * @param {object} message msg variables passed in order to calculate profit take, stop loss, and pyramid\n * @param {number} rb1 1st RSI Buy Signal\n * @param {number} rb2 2nd RSI Buy Signal\n * @param {number} rb3 3rd RSI Buy Signal\n * @param {number} rs1 1st RSI Sell Signal\n * @param {number} rs2 2nd RSI Sell Signal\n * @param {number} rs3 3rd RSI Sell Signal\n * @param {number} hb1 1st Hist Buy Signal\n * @param {number} hb2 2nd Hist Buy Signal\n * @param {number} hb3 3rd Hist Buy Signal\n * @param {number} hs1 1st Hist Sell Signal (negative)\n * @param {number} hs2 2nd Hist Sell Signal (negative)\n * @param {number} hs3 3rd Hist Sell Signal (negative)\n * @param {number} ptMult Profit Take Multiplier; may not need\n * @param {number} slMult Stop Loss Multiplier; may not need\n * \n * @returns {object} object containing ticker-specific comparison values\n */\nfunction compValCall(message,rb1,rb2,rb3,rs1,rs2,rs3,hb1,hb2,hb3,hs1,hs2,hs3,ptMult,slMult){\n    let pos = message.pos\n    let price = +message.price //plus sign converts message.price to number \n\n    //Profit Take and Stop Loss Calculations\n    let pt, sl;\n    if (pos >= 0) {\n        pt = (pos * price * ptMult);\n        sl = (pos * price * -slMult);\n\n    } else {\n        pt = (-pos * price * ptMult);\n        sl = (-pos * price * -slMult);\n    }\n\n    //Pyramid Calculations\n    let pyramid;\n    if (pos >= 0) {pyramid = (pos * price * 0.001);} \n    else {pyramid = (-pos * price * 0.001);}\n\n    let compVal={\n        \"rsiBuy1\" : rb1,\n        \"rsiBuy2\" : rb2,\n        \"rsiBuy3\" : rb3,\n        \"rsiSell1\" : rs1,\n        \"rsiSell2\" : rs2,\n        \"rsiSell3\" : rs3,\n        \"histBuy1\" : hb1,\n        \"histBuy2\" : hb2,\n        \"histBuy3\" : hb3,\n        \"histSell1\" : hs1,\n        \"histSell2\" : hs2,\n        \"histSell3\" : hs3,\n        \"stopLoss\" : sl,\n        \"profitTake\": pt,\n        \"pyramid\" : pyramid\n    }\n    return compVal;\n}\n\n/**\n * \"Overloaded\" compValCall with some standard parameter values in case they are not specified; NOT FINISHED\n * @author Erik Heitsmith\n * @date 01/08/24\n * @returns {object} object containing ticker-specific comparison values; same object shape as in compValCall above\n */\nfunction compValDefualts() {\n    let compVal = {\n        \"rsiBuy1\": 30,\n        \"rsiBuy2\": 30,\n        \"rsiBuy3\": 30,\n        \"rsiSell1\": 70,\n        \"rsiSell2\": 70,\n        \"rsiSell3\": 70,\n        \"stopLoss\": -.05, //check\n        \"profitTake\": .25, //check\n \n    }\n    return compVal;\n}\n\n/**\n * Function which contains all trading rules\n * @author Erik Heitsmith\n * @date 01/06/24\n * @param {object} message object that contains all message variables \n * @param {object} compVals object that contains all values desired for MACD and RSI comparison, depending on the ticker\n * @returns {object} a msg either contianing a trade authorization, or nothing at all\n */\nfunction tradingRules(message, compVals){\n    //All RSI Signals...consolidate?\n    let rsiBuy1 = compVals.rsiBuy1\n    let rsiBuy2 = compVals.rsiBuy2\n    let rsiBuy3 = compVals.rsiBuy3\n    let rsiSell1 = compVals.rsiSell1\n    let rsiSell2 = compVals.rsiSell2\n    let rsiSell3 = compVals.rsiSell3 \n    //node.warn(\"RSI Buy 1: \" + rsiBuy1 + \"\\nRSI Buy 2: \" + rsiBuy2 + \"\\nRSI Buy 3: \" + rsiBuy3)\n    //node.warn(\"RSI Sell 1: \" + rsiSell1 + \"\\nRSI Sell 2: \" + rsiSell2 + \"\\nRSI Sell 3: \" + rsiSell3)\n\n    //All Hist Signals...consolidate?\n    let histBuy1 = compVals.histBuy1\n    let histBuy2 = compVals.histBuy2\n    let histBuy3 = compVals.histBuy3\n    let histSell1 = compVals.histSell1\n    let histSell2 = compVals.histSell2\n    let histSell3 = compVals.histSell3\n    //node.warn(\"Hist Buy 1: \" + histBuy1 + \"\\nHist Buy 2: \" + histBuy2 + \"\\nHist Buy 3: \" + histBuy3)\n    //node.warn(\"Hist Sell 1: \" + histSell1 + \"\\nHist Sell 2: \" + histSell2 + \"\\nHist Sell 3: \" + histSell3)\n\n    //All other info\n    let stopLoss = compVals.stopLoss\n    let profitTake = compVals.profitTake\n    let pyramid = compVals.pyramid\n\n    let alpaca_ticker = message.symbol\n    let algo_name = message.algo_name\n    let price = message.price\n    let qty = message.size\n    let qty1 = qty * 2 //never used... why?\n    let qty2 = Math.ceil(qty * .50)\n    let qty3 = qty * 3\n    let rsi = message.rsi\n    let pos = message.pos\n    let hist = message.hist\n    let macd = message.macd //incorporate?\n    let signal = message.signal //incorporate?\n    let profit = message.profit\n    price = +price\n    price = price.toFixed(2)\n    let pos1 = Math.ceil(pos / 2) //never used... why?\n\n\n    //node.warn(\"pyramid: \" + pyramid)\n    //node.warn(\"rsi: \" + rsi)\n    //node.warn(\"macd: \" + macd)\n    //node.warn(\"hist: \" + hist)\n    //node.warn(\"signal: \" + signal)\n    //node.warn(\"ptake1: \" + ptake1)\n    //node.warn(\"pos1: \" + pos1)\n    //node.warn(\"pos: \" + pos)\n    node.warn(\"Algoname: \" + algo_name + \" Ticker: \" + alpaca_ticker + \" Qty: \" + qty + \" Position: \" + pos + \" Price: \" + price + \" RSI: \" + rsi)\n\n    // create a unique clientid with unixtime\n    let d = Date.now()\n    let client_order_id = alpaca_ticker + d\n    msg.clientorderid = client_order_id // passes this variable in the flow \n\n    let tradeInfo = ''; //will have all the info for sending trades to Alpaca, as below\n    tradeInfo.alpaca_ticker = alpaca_ticker\n    tradeInfo.qty = qty\n    tradeInfo.side = 'buy'; //initialize to buy\n    tradeInfo.type = 'limit'; //initialized to limit; change to 'market' if desired\n    tradeInfo.client_order_id = client_order_id\n    tradeInfo.price = price\n    tradeInfo.subtag = algo_name\n\n    //CASE 1\n    if ((profit < stopLoss) && (pos < 0)) {\n        node.warn(\"Case 1: Cut losses buy short positions at market\")\n        tradeInfo.qty = (pos * -1)\n        msg.payload = tempCall(tradeInfo)\n        node.warn(msg.payload)\n        return msg;\n    }\n\n    //CASE 2\n    else if ((profit < stopLoss) && (pos > 0)) {\n        node.warn(\"Case 2: cut losses on long positions sell at market\")\n        tradeInfo.side = 'sell'\n        tradeInfo.qty = pos\n        msg.payload = tempCall(tradeInfo)\n        node.warn(msg.payload)\n        return msg;\n    }\n\n    //CASE 3\n    else if ((profit > profitTake) && (pos < 0)) {\n        node.warn(\"Case 3: take short position profits off table buy market\")\n        tradeInfo.qty = (pos * -1)\n        msg.payload = tempCall(tradeInfo)\n        node.warn(msg.payload)\n        return msg;\n    }\n\n    //CASE 4\n    else if ((profit > profitTake) && (pos > 0)) {\n        node.warn(\"Case 4: take short position profits off table buy market\")\n        tradeInfo.side = 'sell'\n        tradeInfo.qty = pos\n        msg.payload = tempCall(tradeInfo)\n        node.warn(msg.payload)\n        return msg;\n    }\n\n    //CASE 5\n    else if ((rsi > rsiSell2) && (hist > histBuy2) && (pos > 0)) {\n        node.warn(\"CASE 5: holding LONG positions MACD and RSI suggest buy more long positions\")\n        tradeInfo.side = 'sell'\n        tradeInfo.qty = pos\n        msg.payload = tempCall(tradeInfo)\n        node.warn(msg.payload)\n        return msg;\n    } \n\n    //CASE 6\n    else if ((rsi < rsiBuy2) && (hist < histSell2) && (pos < 0)) {\n        node.warn(\"CASE 6: Holding Short Position and RSI and MACD indicates sell more short positions\")\n        tradeInfo.qty = (pos * -1)\n        msg.payload = tempCall(tradeInfo)\n        node.warn(msg.payload)\n        return msg;\n\n    }\n\n    //CASE 7\n    else if ((rsi < rsiBuy3) && (hist < histSell3) && (pos == 0)) {\n        node.warn(\"CASE 7: No position held. RSI and MACD sell indicates short position times 2\")\n        tradeInfo.side = 'sell'        \n        tradeInfo.qty = qty3\n        msg.payload = tempCall(tradeInfo)\n        node.warn(msg.payload)\n        return msg;\n    } \n\n    //CASE 8\n    else if ((rsi < rsiBuy2) && (hist <= histSell2) && (pos == 0)) {\n        node.warn(\"CASE 8: No position held. RSI and MACD sell indicates short position times 2\")\n        tradeInfo.side = 'sell'        \n        tradeInfo.qty = qty3\n        msg.payload = tempCall(tradeInfo)\n        node.warn(msg.payload)\n        return msg;\n    } \n\n    //CASE 9\n    else if ((rsi < rsiBuy1) && (hist <= -0.019) && (pos == 0)) {\n        node.warn(\"CASE 9: No position held. RSI and MACD sell indicates short position times 2\")\n        tradeInfo.side = 'sell'        \n        tradeInfo.qty = qty3\n        msg.payload = tempCall(tradeInfo)\n        node.warn(msg.payload)\n        return msg;\n    } \n\n    //CASE 10\n    else if ((rsi > rsiSell3) && (hist > 0.038) && (pos == 0)) {\n        node.warn(\"CASE 10: No position held. RSI and MACD indicates buy long position times 2\")\n        tradeInfo.qty = qty3\n        msg.payload = tempCall(tradeInfo)\n        node.warn(msg.payload)\n        return msg;\n    } \n\n    //CASE 11\n    else if ((rsi > rsiSell2) && (hist >= 0.028) && (pos == 0)) {\n        node.warn(\"CASE 11: No position held. RSI and MACD indicates buy long position times 2\")\n        tradeInfo.qty = qty3\n        msg.payload = tempCall(tradeInfo)\n        node.warn(msg.payload)\n        return msg;\n    } \n\n    //CASE 12\n    else if ((rsi > rsiSell1) && (hist >= histBuy1) && (pos == 0)) {\n        node.warn(\"CASE 12: No position held. RSI and MACD indicates buy long position times 2\")\n        tradeInfo.qty = qty3\n        msg.payload = tempCall(tradeInfo)\n        node.warn(msg.payload)\n        return msg;\n    }\n    \n    //CASE 13\n    else if ((rsi < rsiBuy3) && (hist < histSell3) && (pos > 0)) {\n        tradeInfo.side = 'sell'        \n        node.warn(\"CASE 13: No position held. RSI and MACD sell indicates short position times 2\")\n        tradeInfo.qty = qty3\n        msg.payload = tempCall(tradeInfo)\n        node.warn(msg.payload)\n        return msg;\n    } \n\n    //CASE 14\n    else if ((rsi < rsiBuy2) && (hist <= histSell2) && (pos > 0)) {\n        node.warn(\"CASE 14: No position held. RSI and MACD sell indicates short position times 2\")\n        tradeInfo.side = 'sell'        \n        tradeInfo.qty = qty3\n        msg.payload = tempCall(tradeInfo)\n        node.warn(msg.payload)\n        return msg;\n    } \n\n    //CASE 15\n    else if ((rsi < rsiBuy1) && (hist <= histSell1) && (pos > 0)) {\n        node.warn(\"CASE 15: No position held. RSI and MACD sell indicates short position times 2\")\n        tradeInfo.side = 'sell'        \n        tradeInfo.qty = qty3\n        msg.payload = tempCall(tradeInfo)\n        node.warn(msg.payload)\n        return msg;\n    } \n\n    //CASE 16\n    else if ((rsi > rsiSell3) && (hist > histBuy3) && (pos < 0)) {\n        node.warn(\"CASE 16: No position held. RSI and MACD indicates buy long position times 2\")\n        tradeInfo.qty = qty3\n        msg.payload = tempCall(tradeInfo)\n        node.warn(msg.payload)\n        return msg;\n    } \n\n    //CASE 17\n    else if ((rsi > rsiSell2) && (hist >= histBuy2) && (pos < 0)) {\n        node.warn(\"CASE 17: No position held. RSI and MACD indicates buy long position times 2\")\n        tradeInfo.qty = qty3\n        msg.payload = tempCall(tradeInfo)\n        node.warn(msg.payload)\n        return msg;\n    } \n\n    //CASE 18\n    else if ((rsi > rsiSell1) && (hist >= histBuy1) && (pos < 0)) {\n        node.warn(\"CASE 18: No position held. RSI and MACD indicates buy long position times 2\")\n        qty = qty3\n        msg.payload = tempCall(tradeInfo)\n        node.warn(msg.payload)\n        return msg;\n    }\n\n    //CASE 19\n    else if ((profit > pyramid) && (pos > 0)) {\n        qty = qty2\n        node.warn(\"Case 19: take more long position buy market\")\n        msg.payload = tempCall(tradeInfo)\n        node.warn(msg.payload)\n        return msg;\n    }\n    \n    //CASE 20\n    else if ((profit > pyramid) && (pos < 0)) {\n        tradeInfo.side = 'sell'        \n        qty = qty2\n        node.warn(\"Case 20: take more short position sell market short\")\n        msg.payload = tempCall(tradeInfo)\n        node.warn(msg.payload)\n        return msg;\n    }\n\n    return msg; //no case met\n}\n\n//if statements to check the specific ticker to determine the compVals\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 1680,
        "wires": [
            []
        ]
    }
]