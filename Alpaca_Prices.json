[
    {
        "id": "2a6da7c3a152ed0d",
        "type": "tab",
        "label": "Alpaca Prices",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1ff34d23428accab",
        "type": "alpaca-data-last-multi-trade",
        "z": "2a6da7c3a152ed0d",
        "conf": "c06cec183f9317f9",
        "symbol": "",
        "name": "",
        "x": 570,
        "y": 380,
        "wires": [
            [
                "78e1d5bd65dfc5db"
            ]
        ]
    },
    {
        "id": "78e1d5bd65dfc5db",
        "type": "function",
        "z": "2a6da7c3a152ed0d",
        "name": "Get prices",
        "func": "/*\nExtract the last prices for all the symbols, and return them in the msg.\nSave the last prices for all the symbols into a Postgres table.\n*/\n\n// Get the machine time in milliseconds\nlet timeDate = new Date()\nlet timeMillisec = timeDate.getTime()\n\n// Get the Alpaca price object with the last prices\nlet priceLast = msg.payload\n\n// Get the symbol names (keys) of the elements of the price object\nlet symbolNames = Object.keys(priceLast)\n// node.warn(\"symbolNames = \" + symbolNames)\n\n// Postgres queries\n// let queryString = \"INSERT INTO priceTable (timestamp, AAPL_time, AAPL_price, AAPL_volume, MSFT_time, MSFT_price, MSFT_volume, GOOG_time, GOOG_price, GOOG_volume) VALUES (\" + timeMillisec\n// let queryString = \"INSERT INTO priceTable (timestamp, AAPL_price, AAPL_volume, MSFT_price, MSFT_volume, GOOG_price, GOOG_volume) VALUES (\" + timeMillisec\n\n// Create the first part of the postgres query\nlet queryString = \"INSERT INTO priceTable (timestamp\"\n// Add the fields to postgres query in loop\nsymbolNames.forEach((symbolName) => {\n    queryString += \", \" + symbolName + \"_price, \" + symbolName + \"_volume\"\n}) // end forEach\nqueryString += \") VALUES (\" + timeMillisec\n\n// Add the data to the postgres query in loop\nlet dataSet = {} // Data for symbol\nlet priceStocks = {} // Current prices for all the symbols\nsymbolNames.forEach((symbolName) => {\n    // Get the data object for symbolName\n    dataSet = priceLast[symbolName]\n    // queryString += \", \" + Date.parse(dataSet.t) + \", \" + dataSet.p + \", \" + dataSet.s\n    // Get the price and volume for symbolName\n    queryString += \", \" + dataSet.p + \", \" + dataSet.s\n    priceStocks[symbolName] = dataSet.p\n    // node.warn(symbolName + \" price = \" + dataSet.p)\n}) // end forEach\nqueryString += \")\"\nglobal.set(\"priceStocks\", priceStocks) // Set the current prices for all the symbols\n\n// queryString += \", \" + goog.t + \", \" + goog.p + \", \" + goog.s + \")\"\n// node.warn(\"Query = \" + queryString)\n\nmsg.query = queryString\nmsg.priceStocks = priceStocks\n\nreturn msg\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 380,
        "wires": [
            [
                "298acaf98e712701",
                "26cea49dd753ec93"
            ]
        ]
    },
    {
        "id": "426813ea7c2500ca",
        "type": "comment",
        "z": "2a6da7c3a152ed0d",
        "name": "Insert prices into tables",
        "info": "",
        "x": 140,
        "y": 300,
        "wires": []
    },
    {
        "id": "298acaf98e712701",
        "type": "link out",
        "z": "2a6da7c3a152ed0d",
        "name": "Prices out",
        "mode": "link",
        "links": [
            "b5a6c407eb1d251f",
            "b0163539772fa9fd"
        ],
        "x": 995,
        "y": 420,
        "wires": []
    },
    {
        "id": "26cea49dd753ec93",
        "type": "postgresql",
        "z": "2a6da7c3a152ed0d",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1040,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "28f9f5f3e62171c1",
        "type": "comment",
        "z": "2a6da7c3a152ed0d",
        "name": "Create flow variables",
        "info": "",
        "x": 140,
        "y": 40,
        "wires": []
    },
    {
        "id": "f9a76757acd2569a",
        "type": "inject",
        "z": "2a6da7c3a152ed0d",
        "name": "Run once",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 100,
        "wires": [
            [
                "92587773bc53c69c"
            ]
        ]
    },
    {
        "id": "92587773bc53c69c",
        "type": "function",
        "z": "2a6da7c3a152ed0d",
        "name": "Create flow variables",
        "func": "// Collect prices in extended hours?\nflow.set(\"tradExtended\", false)\nnode.warn(\"Collect prices in extended hours = \" + flow.get(\"tradExtended\"))\n\n// String with tickers to collect prices\nflow.set(\"symbolNames\", \"AAPL,MSFT,GOOG,SPY,QQQ,XLK,SVXY,VXX,USO,TLT\")\nnode.warn(\"Trading symbols = \" + flow.get(\"symbolNames\"))\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "9bd61741e7c5e7df",
        "type": "inject",
        "z": "2a6da7c3a152ed0d",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 160,
        "wires": [
            [
                "6038b1c51f5c67fd"
            ]
        ]
    },
    {
        "id": "6038b1c51f5c67fd",
        "type": "function",
        "z": "2a6da7c3a152ed0d",
        "name": "Print flow variables",
        "func": "node.warn(\"Collect prices in extended hours = \" + flow.get(\"tradExtended\"))\n\nnode.warn(\"Trading symbols = \" + flow.get(\"symbolNames\"))\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "b0163539772fa9fd",
        "type": "link in",
        "z": "2a6da7c3a152ed0d",
        "name": "Get prices",
        "links": [
            "298acaf98e712701"
        ],
        "x": 75,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "af208ff20bacda12",
        "type": "function",
        "z": "2a6da7c3a152ed0d",
        "name": "Get GOOG price from msg",
        "func": "// Get the current prices for all stocks from msg\nlet priceStocks = msg.priceStocks\n\n// Get the current price for GOOG\nlet symbolName = \"GOOG\"\nlet pricegoog = priceStocks[symbolName]\nnode.warn(symbolName + \" price = \" + pricegoog)\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "b366d0c077c5ff90",
        "type": "function",
        "z": "2a6da7c3a152ed0d",
        "name": "Get GOOG price from global",
        "func": "// Get the current prices for all the stocks from global variable\nlet priceStocks = global.get(\"priceStocks\")\n\n// Get the current price for GOOG\nlet symbolName = \"GOOG\"\nnode.warn(symbolName + \" price = \" + priceStocks[symbolName])\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "a5b96c551e4e1b39",
        "type": "inject",
        "z": "2a6da7c3a152ed0d",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 580,
        "wires": [
            [
                "b366d0c077c5ff90"
            ]
        ]
    },
    {
        "id": "a27d0ea74ae7c566",
        "type": "inject",
        "z": "2a6da7c3a152ed0d",
        "name": "Second",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 380,
        "wires": [
            [
                "cff20bd54c6c333d"
            ]
        ]
    },
    {
        "id": "5f130c3b0f311c21",
        "type": "inject",
        "z": "2a6da7c3a152ed0d",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 520,
        "wires": [
            [
                "df3df29a95c3bee5"
            ]
        ]
    },
    {
        "id": "df3df29a95c3bee5",
        "type": "function",
        "z": "2a6da7c3a152ed0d",
        "name": "Get current prices from global",
        "func": "// Get the current prices\nlet priceStocks = global.get(\"priceStocks\")\n\n// Get the price object names (keys)\nlet symbolNames = Object.keys(priceStocks)\n\nsymbolNames.forEach((symbolName) => {\n    // Get the price for symbolName\n    node.warn(symbolName + \" price = \" + priceStocks[symbolName])\n}) // end forEach\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "a953430dd42813fd",
        "type": "http in",
        "z": "2a6da7c3a152ed0d",
        "name": "/api/download_spyseconds",
        "url": "/api/download_spyseconds",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 1300,
        "wires": [
            [
                "5b655fd095332ede"
            ]
        ]
    },
    {
        "id": "98892dd01e10e4cb",
        "type": "http response",
        "z": "2a6da7c3a152ed0d",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json",
            "Content-Disposition": "attachment; filename=\"output.csv\""
        },
        "x": 1130,
        "y": 1300,
        "wires": []
    },
    {
        "id": "682e1265b694ce51",
        "type": "csv",
        "z": "2a6da7c3a152ed0d",
        "name": "",
        "sep": ",",
        "hdrin": false,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": " ",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 810,
        "y": 1300,
        "wires": [
            [
                "3e3bba6e6a35bcf3"
            ]
        ]
    },
    {
        "id": "5b655fd095332ede",
        "type": "function",
        "z": "2a6da7c3a152ed0d",
        "name": "Export spyseconds",
        "func": "msg.query = \"SELECT timestamp, spy_price, spy_volume FROM priceTable\"\nnode.warn(msg.query)\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1300,
        "wires": [
            [
                "7fbdacce094f5a87"
            ]
        ]
    },
    {
        "id": "3e3bba6e6a35bcf3",
        "type": "file",
        "z": "2a6da7c3a152ed0d",
        "name": "write report",
        "filename": "/data/store/output.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 970,
        "y": 1300,
        "wires": [
            [
                "98892dd01e10e4cb"
            ]
        ]
    },
    {
        "id": "7fbdacce094f5a87",
        "type": "postgresql",
        "z": "2a6da7c3a152ed0d",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 640,
        "y": 1300,
        "wires": [
            [
                "682e1265b694ce51"
            ]
        ]
    },
    {
        "id": "e1e8f110a697c41a",
        "type": "comment",
        "z": "2a6da7c3a152ed0d",
        "name": "Download price tables to CSV files",
        "info": "",
        "x": 180,
        "y": 1220,
        "wires": []
    },
    {
        "id": "a223048c5a6cc474",
        "type": "http in",
        "z": "2a6da7c3a152ed0d",
        "name": "/api/download_aaplseconds",
        "url": "/api/download_aaplseconds",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 1740,
        "wires": [
            [
                "b4c57d114721a783"
            ]
        ]
    },
    {
        "id": "4dbe4c384c239e41",
        "type": "http response",
        "z": "2a6da7c3a152ed0d",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json",
            "Content-Disposition": "attachment; filename=\"output.csv\""
        },
        "x": 1130,
        "y": 1740,
        "wires": []
    },
    {
        "id": "31e4b9778376711e",
        "type": "csv",
        "z": "2a6da7c3a152ed0d",
        "name": "",
        "sep": ",",
        "hdrin": false,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": " ",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 810,
        "y": 1740,
        "wires": [
            [
                "ab1becd14c8fdb9c"
            ]
        ]
    },
    {
        "id": "b4c57d114721a783",
        "type": "function",
        "z": "2a6da7c3a152ed0d",
        "name": "Export aaplseconds",
        "func": "msg.query = \"SELECT timestamp, aapl_price, aapl_volume FROM priceTable\"\nnode.warn(msg.query)\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 1740,
        "wires": [
            [
                "208b1866775ecf57"
            ]
        ]
    },
    {
        "id": "ab1becd14c8fdb9c",
        "type": "file",
        "z": "2a6da7c3a152ed0d",
        "name": "write report",
        "filename": "/data/store/output.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 970,
        "y": 1740,
        "wires": [
            [
                "4dbe4c384c239e41"
            ]
        ]
    },
    {
        "id": "208b1866775ecf57",
        "type": "postgresql",
        "z": "2a6da7c3a152ed0d",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 640,
        "y": 1740,
        "wires": [
            [
                "31e4b9778376711e"
            ]
        ]
    },
    {
        "id": "c03becfdc9736f32",
        "type": "http in",
        "z": "2a6da7c3a152ed0d",
        "name": "/api/download_vxxseconds",
        "url": "/api/download_vxxseconds",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 1600,
        "wires": [
            [
                "edc5a34789a126bd"
            ]
        ]
    },
    {
        "id": "84e030f6b1087311",
        "type": "http response",
        "z": "2a6da7c3a152ed0d",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json",
            "Content-Disposition": "attachment; filename=\"output.csv\""
        },
        "x": 1130,
        "y": 1600,
        "wires": []
    },
    {
        "id": "0c10e0c044ad8718",
        "type": "csv",
        "z": "2a6da7c3a152ed0d",
        "name": "",
        "sep": ",",
        "hdrin": false,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": " ",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 810,
        "y": 1600,
        "wires": [
            [
                "c3aab8c3f1f3ac4b"
            ]
        ]
    },
    {
        "id": "edc5a34789a126bd",
        "type": "function",
        "z": "2a6da7c3a152ed0d",
        "name": "Export vxxseconds",
        "func": "msg.query = \"SELECT timestamp, vxx_price, vxx_volume FROM priceTable\"\nnode.warn(msg.query)\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1600,
        "wires": [
            [
                "d27c7bd5b7155ea5"
            ]
        ]
    },
    {
        "id": "c3aab8c3f1f3ac4b",
        "type": "file",
        "z": "2a6da7c3a152ed0d",
        "name": "write report",
        "filename": "/data/store/output.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 970,
        "y": 1600,
        "wires": [
            [
                "84e030f6b1087311"
            ]
        ]
    },
    {
        "id": "d27c7bd5b7155ea5",
        "type": "postgresql",
        "z": "2a6da7c3a152ed0d",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 640,
        "y": 1600,
        "wires": [
            [
                "0c10e0c044ad8718"
            ]
        ]
    },
    {
        "id": "b81e226192d27d71",
        "type": "http in",
        "z": "2a6da7c3a152ed0d",
        "name": "/api/download_svxyseconds",
        "url": "/api/download_svxyseconds",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 1660,
        "wires": [
            [
                "819be9b35efa2d36"
            ]
        ]
    },
    {
        "id": "7fce712e8b06a887",
        "type": "http response",
        "z": "2a6da7c3a152ed0d",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json",
            "Content-Disposition": "attachment; filename=\"output.csv\""
        },
        "x": 1130,
        "y": 1660,
        "wires": []
    },
    {
        "id": "72afea45bab65faf",
        "type": "csv",
        "z": "2a6da7c3a152ed0d",
        "name": "",
        "sep": ",",
        "hdrin": false,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": " ",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 810,
        "y": 1660,
        "wires": [
            [
                "bfafa7ca7c543916"
            ]
        ]
    },
    {
        "id": "819be9b35efa2d36",
        "type": "function",
        "z": "2a6da7c3a152ed0d",
        "name": "Export svxyseconds",
        "func": "msg.query = \"SELECT timestamp, svxy_price, svxy_volume FROM priceTable\"\nnode.warn(msg.query)\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 1660,
        "wires": [
            [
                "380b57771e5797cf"
            ]
        ]
    },
    {
        "id": "bfafa7ca7c543916",
        "type": "file",
        "z": "2a6da7c3a152ed0d",
        "name": "write report",
        "filename": "/data/store/output.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 970,
        "y": 1660,
        "wires": [
            [
                "7fce712e8b06a887"
            ]
        ]
    },
    {
        "id": "380b57771e5797cf",
        "type": "postgresql",
        "z": "2a6da7c3a152ed0d",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 640,
        "y": 1660,
        "wires": [
            [
                "72afea45bab65faf"
            ]
        ]
    },
    {
        "id": "1d62e7d8f6ec3b09",
        "type": "http in",
        "z": "2a6da7c3a152ed0d",
        "name": "/api/download_xlkseconds",
        "url": "/api/download_xlkseconds",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 1420,
        "wires": [
            [
                "26a4af74a61618da"
            ]
        ]
    },
    {
        "id": "6bb29f0985d5ca09",
        "type": "http response",
        "z": "2a6da7c3a152ed0d",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json",
            "Content-Disposition": "attachment; filename=\"output.csv\""
        },
        "x": 1130,
        "y": 1420,
        "wires": []
    },
    {
        "id": "894becd8e352ab1d",
        "type": "csv",
        "z": "2a6da7c3a152ed0d",
        "name": "",
        "sep": ",",
        "hdrin": false,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": " ",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 810,
        "y": 1420,
        "wires": [
            [
                "8f6c40178076de8d"
            ]
        ]
    },
    {
        "id": "26a4af74a61618da",
        "type": "function",
        "z": "2a6da7c3a152ed0d",
        "name": "Export xlkseconds",
        "func": "msg.query = \"SELECT timestamp, xlk_price, xlk_volume FROM priceTable\"\nnode.warn(msg.query)\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1420,
        "wires": [
            [
                "55b837d8bb2c1882"
            ]
        ]
    },
    {
        "id": "8f6c40178076de8d",
        "type": "file",
        "z": "2a6da7c3a152ed0d",
        "name": "write report",
        "filename": "/data/store/output.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 970,
        "y": 1420,
        "wires": [
            [
                "6bb29f0985d5ca09"
            ]
        ]
    },
    {
        "id": "55b837d8bb2c1882",
        "type": "postgresql",
        "z": "2a6da7c3a152ed0d",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 640,
        "y": 1420,
        "wires": [
            [
                "894becd8e352ab1d"
            ]
        ]
    },
    {
        "id": "65e9b123f80e5301",
        "type": "http in",
        "z": "2a6da7c3a152ed0d",
        "name": "/api/download_tltseconds",
        "url": "/api/download_tltseconds",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 1480,
        "wires": [
            [
                "f3cf3888e8e7d239"
            ]
        ]
    },
    {
        "id": "2e80a0fda6c13def",
        "type": "http response",
        "z": "2a6da7c3a152ed0d",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json",
            "Content-Disposition": "attachment; filename=\"output.csv\""
        },
        "x": 1130,
        "y": 1480,
        "wires": []
    },
    {
        "id": "321dc0d35c591174",
        "type": "csv",
        "z": "2a6da7c3a152ed0d",
        "name": "",
        "sep": ",",
        "hdrin": false,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": " ",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 810,
        "y": 1480,
        "wires": [
            [
                "6b486bd54ad4bffa"
            ]
        ]
    },
    {
        "id": "f3cf3888e8e7d239",
        "type": "function",
        "z": "2a6da7c3a152ed0d",
        "name": "Export tltseconds",
        "func": "msg.query = \"SELECT timestamp, tlt_price, tlt_volume FROM priceTable\"\nnode.warn(msg.query)\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1480,
        "wires": [
            [
                "1caa0db64a2babc6"
            ]
        ]
    },
    {
        "id": "6b486bd54ad4bffa",
        "type": "file",
        "z": "2a6da7c3a152ed0d",
        "name": "write report",
        "filename": "/data/store/output.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 970,
        "y": 1480,
        "wires": [
            [
                "2e80a0fda6c13def"
            ]
        ]
    },
    {
        "id": "1caa0db64a2babc6",
        "type": "postgresql",
        "z": "2a6da7c3a152ed0d",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 640,
        "y": 1480,
        "wires": [
            [
                "321dc0d35c591174"
            ]
        ]
    },
    {
        "id": "08d6ec89ed7f9254",
        "type": "http in",
        "z": "2a6da7c3a152ed0d",
        "name": "/api/download_usoseconds",
        "url": "/api/download_usoseconds",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 1540,
        "wires": [
            [
                "558d39b5395fc4ef"
            ]
        ]
    },
    {
        "id": "617d9b75d15bfd75",
        "type": "http response",
        "z": "2a6da7c3a152ed0d",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json",
            "Content-Disposition": "attachment; filename=\"output.csv\""
        },
        "x": 1130,
        "y": 1540,
        "wires": []
    },
    {
        "id": "46d91e047f35d3f4",
        "type": "csv",
        "z": "2a6da7c3a152ed0d",
        "name": "",
        "sep": ",",
        "hdrin": false,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": " ",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 810,
        "y": 1540,
        "wires": [
            [
                "bf2ae02ba3fe663f"
            ]
        ]
    },
    {
        "id": "558d39b5395fc4ef",
        "type": "function",
        "z": "2a6da7c3a152ed0d",
        "name": "Export usoseconds",
        "func": "msg.query = \"SELECT timestamp, uso_price, uso_volume FROM priceTable\"\nnode.warn(msg.query)\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1540,
        "wires": [
            [
                "4583955260d00b2d"
            ]
        ]
    },
    {
        "id": "bf2ae02ba3fe663f",
        "type": "file",
        "z": "2a6da7c3a152ed0d",
        "name": "write report",
        "filename": "/data/store/output.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 970,
        "y": 1540,
        "wires": [
            [
                "617d9b75d15bfd75"
            ]
        ]
    },
    {
        "id": "4583955260d00b2d",
        "type": "postgresql",
        "z": "2a6da7c3a152ed0d",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 640,
        "y": 1540,
        "wires": [
            [
                "46d91e047f35d3f4"
            ]
        ]
    },
    {
        "id": "c8352c78ea38f942",
        "type": "http in",
        "z": "2a6da7c3a152ed0d",
        "name": "/api/download_msftseconds",
        "url": "/api/download_msftseconds",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 1800,
        "wires": [
            [
                "940a167265238464"
            ]
        ]
    },
    {
        "id": "851106f6bf4a0791",
        "type": "http response",
        "z": "2a6da7c3a152ed0d",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json",
            "Content-Disposition": "attachment; filename=\"output.csv\""
        },
        "x": 1130,
        "y": 1800,
        "wires": []
    },
    {
        "id": "49f38c9104290fbf",
        "type": "csv",
        "z": "2a6da7c3a152ed0d",
        "name": "",
        "sep": ",",
        "hdrin": false,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": " ",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 810,
        "y": 1800,
        "wires": [
            [
                "8c58ed06be94ae5e"
            ]
        ]
    },
    {
        "id": "940a167265238464",
        "type": "function",
        "z": "2a6da7c3a152ed0d",
        "name": "Export msftseconds",
        "func": "msg.query = \"SELECT timestamp, msft_price, msft_volume FROM priceTable\"\nnode.warn(msg.query)\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 1800,
        "wires": [
            [
                "ea50af5006bde130"
            ]
        ]
    },
    {
        "id": "8c58ed06be94ae5e",
        "type": "file",
        "z": "2a6da7c3a152ed0d",
        "name": "write report",
        "filename": "/data/store/output.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 970,
        "y": 1800,
        "wires": [
            [
                "851106f6bf4a0791"
            ]
        ]
    },
    {
        "id": "ea50af5006bde130",
        "type": "postgresql",
        "z": "2a6da7c3a152ed0d",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 640,
        "y": 1800,
        "wires": [
            [
                "49f38c9104290fbf"
            ]
        ]
    },
    {
        "id": "4f3839f4b0746a42",
        "type": "http in",
        "z": "2a6da7c3a152ed0d",
        "name": "/api/download_googseconds",
        "url": "/api/download_googseconds",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 1860,
        "wires": [
            [
                "1a19b939f86898a9"
            ]
        ]
    },
    {
        "id": "be223deea991f3bb",
        "type": "http response",
        "z": "2a6da7c3a152ed0d",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json",
            "Content-Disposition": "attachment; filename=\"output.csv\""
        },
        "x": 1130,
        "y": 1860,
        "wires": []
    },
    {
        "id": "f6b0db6aa724b5d2",
        "type": "csv",
        "z": "2a6da7c3a152ed0d",
        "name": "",
        "sep": ",",
        "hdrin": false,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": " ",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 810,
        "y": 1860,
        "wires": [
            [
                "32f3120cce934fec"
            ]
        ]
    },
    {
        "id": "1a19b939f86898a9",
        "type": "function",
        "z": "2a6da7c3a152ed0d",
        "name": "Export googseconds",
        "func": "msg.query = \"SELECT timestamp, goog_price, goog_volume FROM priceTable\"\nnode.warn(msg.query)\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 1860,
        "wires": [
            [
                "5279450e9b8985d6"
            ]
        ]
    },
    {
        "id": "32f3120cce934fec",
        "type": "file",
        "z": "2a6da7c3a152ed0d",
        "name": "write report",
        "filename": "/data/store/output.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 970,
        "y": 1860,
        "wires": [
            [
                "be223deea991f3bb"
            ]
        ]
    },
    {
        "id": "5279450e9b8985d6",
        "type": "postgresql",
        "z": "2a6da7c3a152ed0d",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 640,
        "y": 1860,
        "wires": [
            [
                "f6b0db6aa724b5d2"
            ]
        ]
    },
    {
        "id": "70c1e6666be43074",
        "type": "function",
        "z": "2a6da7c3a152ed0d",
        "name": "Export qqqseconds",
        "func": "msg.query = \"SELECT timestamp, qqq_price, qqq_volume FROM priceTable\"\nnode.warn(msg.query)\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1360,
        "wires": [
            [
                "a9349c294db6effc"
            ]
        ]
    },
    {
        "id": "a9349c294db6effc",
        "type": "postgresql",
        "z": "2a6da7c3a152ed0d",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 640,
        "y": 1360,
        "wires": [
            [
                "cdc6b150d20d47d3"
            ]
        ]
    },
    {
        "id": "ca525af9a365707b",
        "type": "http in",
        "z": "2a6da7c3a152ed0d",
        "name": "/api/download_qqqseconds",
        "url": "/api/download_qqqseconds",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 1360,
        "wires": [
            [
                "70c1e6666be43074"
            ]
        ]
    },
    {
        "id": "eecf3e081cfb0a91",
        "type": "http response",
        "z": "2a6da7c3a152ed0d",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json",
            "Content-Disposition": "attachment; filename=\"output.csv\""
        },
        "x": 1130,
        "y": 1360,
        "wires": []
    },
    {
        "id": "cdc6b150d20d47d3",
        "type": "csv",
        "z": "2a6da7c3a152ed0d",
        "name": "",
        "sep": ",",
        "hdrin": false,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": " ",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 810,
        "y": 1360,
        "wires": [
            [
                "8e6fd9529b89db98"
            ]
        ]
    },
    {
        "id": "8e6fd9529b89db98",
        "type": "file",
        "z": "2a6da7c3a152ed0d",
        "name": "write report",
        "filename": "/data/store/output.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 970,
        "y": 1360,
        "wires": [
            [
                "eecf3e081cfb0a91"
            ]
        ]
    },
    {
        "id": "6e6118a03ec15849",
        "type": "function",
        "z": "2a6da7c3a152ed0d",
        "name": "Erase the price table priceTable",
        "func": "// Erase all the price data from the table priceTable\nmsg.query = \"TRUNCATE TABLE priceTable\"\n\nnode.warn(msg.query)\nreturn msg\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 840,
        "wires": [
            [
                "abf16dcf4aacfbca"
            ]
        ]
    },
    {
        "id": "abf16dcf4aacfbca",
        "type": "postgresql",
        "z": "2a6da7c3a152ed0d",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 600,
        "y": 840,
        "wires": [
            [
                "9921c10bbb4b32d2"
            ]
        ]
    },
    {
        "id": "6b49f0b793da712f",
        "type": "inject",
        "z": "2a6da7c3a152ed0d",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 1020,
        "wires": [
            [
                "4606f640b5dad89d"
            ]
        ]
    },
    {
        "id": "4606f640b5dad89d",
        "type": "function",
        "z": "2a6da7c3a152ed0d",
        "name": "Print price tables",
        "func": "msg.query = \"SELECT * FROM priceTable\" // + \"LIMIT 5\"\nnode.warn(msg.query)\nreturn msg\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1020,
        "wires": [
            [
                "e189f75a4e72d996"
            ]
        ]
    },
    {
        "id": "e189f75a4e72d996",
        "type": "postgresql",
        "z": "2a6da7c3a152ed0d",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 600,
        "y": 1020,
        "wires": [
            [
                "19950777bc5477f4"
            ]
        ]
    },
    {
        "id": "19950777bc5477f4",
        "type": "debug",
        "z": "2a6da7c3a152ed0d",
        "name": "debug 919",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 1020,
        "wires": []
    },
    {
        "id": "9921c10bbb4b32d2",
        "type": "debug",
        "z": "2a6da7c3a152ed0d",
        "name": "debug 920",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 840,
        "wires": []
    },
    {
        "id": "1e05ef636875085b",
        "type": "comment",
        "z": "2a6da7c3a152ed0d",
        "name": "Create price table",
        "info": "",
        "x": 130,
        "y": 780,
        "wires": []
    },
    {
        "id": "2e9b306d06733115",
        "type": "inject",
        "z": "2a6da7c3a152ed0d",
        "name": "3:00 AM",
        "props": [],
        "repeat": "",
        "crontab": "00 03 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 840,
        "wires": [
            [
                "6e6118a03ec15849"
            ]
        ]
    },
    {
        "id": "b3648db472f46ff3",
        "type": "function",
        "z": "2a6da7c3a152ed0d",
        "name": "Create the price table priceTable",
        "func": "// Write query to create the price table priceTable - tedious\n// msg.query = \"CREATE TABLE IF NOT EXISTS priceTable (timestamp BIGINT, AAPL_time BIGINT, AAPL_price FLOAT, AAPL_volume INT, MSFT_time BIGINT, MSFT_price FLOAT, MSFT_volume INT, GOOG_time BIGINT, GOOG_price FLOAT, GOOG_volume INT)\"\n\n\n// Or perform a loop to write the query string for creating the price table priceTable\n\n// Split the string symbolNames\nlet symbolNames = flow.get(\"symbolNames\")\nsymbolNames = symbolNames.split(\",\")\n\n// Loop to create the price table priceTable\nlet queryString = \"CREATE TABLE IF NOT EXISTS priceTable (timestamp BIGINT\"\nsymbolNames.forEach((symbolName) => {\n    queryString += \", \" + symbolName + \"_price FLOAT, \" + symbolName + \"_volume INT\"\n}) // end forEach\nqueryString += \")\"\nnode.warn(queryString)\n\nmsg.query = queryString\nreturn msg\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 960,
        "wires": [
            [
                "291dc1fcaf4ce083"
            ]
        ]
    },
    {
        "id": "291dc1fcaf4ce083",
        "type": "postgresql",
        "z": "2a6da7c3a152ed0d",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 600,
        "y": 960,
        "wires": [
            [
                "7dfb5dae4871986f"
            ]
        ]
    },
    {
        "id": "7dfb5dae4871986f",
        "type": "debug",
        "z": "2a6da7c3a152ed0d",
        "name": "debug 925",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 960,
        "wires": []
    },
    {
        "id": "abc3b0ca944a94ca",
        "type": "inject",
        "z": "2a6da7c3a152ed0d",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 960,
        "wires": [
            [
                "b3648db472f46ff3"
            ]
        ]
    },
    {
        "id": "4b76f87d214a4ab5",
        "type": "function",
        "z": "2a6da7c3a152ed0d",
        "name": "Get GOOG prices",
        "func": "// Get the machine time in milliseconds\nlet timeDate = new Date()\nlet timeMillisec = timeDate.getTime()\n\n// Get the price object\nlet pricobj = msg.payload\n\n// Get the price object for GOOG\nlet goog = pricobj.GOOG\n// Get the integer timestamp from the Alpaca source\nlet timesource = Date.parse(goog.t)\nnode.warn(\"Machine time = \" + timeMillisec + \" / GOOG time = \" + timesource + \" / price = \" + goog.p + \" / volume = \" + goog.s)\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "c6800c44b37d1267",
        "type": "function",
        "z": "2a6da7c3a152ed0d",
        "name": "Delete the price table priceTable",
        "func": "// Delete the table priceTable\nmsg.query = \"DROP TABLE priceTable\"\n\nnode.warn(msg.query)\nreturn msg\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 900,
        "wires": [
            [
                "183c3ce6c7a07fa2"
            ]
        ]
    },
    {
        "id": "183c3ce6c7a07fa2",
        "type": "postgresql",
        "z": "2a6da7c3a152ed0d",
        "name": "postgres",
        "query": "",
        "postgreSQLConfig": "7455395cf269fb2b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 600,
        "y": 900,
        "wires": [
            [
                "a5d0c2ed0d0199e3"
            ]
        ]
    },
    {
        "id": "a5d0c2ed0d0199e3",
        "type": "debug",
        "z": "2a6da7c3a152ed0d",
        "name": "debug 931",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 900,
        "wires": []
    },
    {
        "id": "aa0262eebf8f81a2",
        "type": "inject",
        "z": "2a6da7c3a152ed0d",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 900,
        "wires": [
            [
                "c6800c44b37d1267"
            ]
        ]
    },
    {
        "id": "cff20bd54c6c333d",
        "type": "function",
        "z": "2a6da7c3a152ed0d",
        "name": "Get symbols",
        "func": "let marketOpen = global.get(\"marketOpen\")\n// let liquidateMode = global.get(\"liquidateMode\")\n// let warmupMode = global.get(\"warmupMode\")\nlet earlyHours = global.get(\"earlyHours\")\nlet afterHours = global.get(\"afterHours\")\nlet tradExtended = (flow.get(\"tradExtended\") && ((earlyHours || afterHours)))\n\n// Trade if either the market is open or if tradExtended\nif (marketOpen || tradExtended) {\n    msg.symbol = flow.get(\"symbolNames\")\n    msg.feed = global.get(\"datatype\")\n//    node.warn(msg.symbol);\n    return msg\n} // end if\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 380,
        "wires": [
            [
                "1ff34d23428accab"
            ]
        ]
    },
    {
        "id": "c06cec183f9317f9",
        "type": "alpaca-account",
        "name": "paper",
        "keyId": "USE-OAUTH-OR-REPLACE",
        "paper": true
    },
    {
        "id": "7455395cf269fb2b",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "127.0.0.1",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "postgres",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "docker",
        "userFieldType": "str",
        "password": "docker",
        "passwordFieldType": "str"
    }
]